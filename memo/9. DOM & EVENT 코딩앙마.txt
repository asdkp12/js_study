
코딩앙마 1강.
=======================================================================

document.documentElement
HTML 접근
document.body
body 접근
document.head
head 접근

.getElementById('id')
아이디 선택

.getElementsByTagName('Tag or Class')
모든 태그명에 접근
**for of 로 접근할 수 있음**

--------css 방식으로 노드 선택하기--------

.QuerySelectorAll('.class')
모든 노드 가져옴

.QuerySelector('#id')
가장 첫 노드 가져옴

:nth-child 같은 것도 쓸 수 있음.
**for of 로 접근할 수 있음**

위는 유사배열이기 때문에
.legth
for of
은 사용 가능하지만

.push
.pop
.filter
.join
은 사용 불가능하다

-----------------------------------------

코딩앙마 2강.
=======================================================================

.QuerySelectorAll('.class')
.getElementsByTagName('Tag or Class')
 위 두 코드는 동일한 동작을 하는것 처럼 보이지만
 반환값은 NodeList와 HTMLCollection으로 다르다.

.QuerySelectorAll('.class')             은 NodeList 를 반환
.getElementsByTagName('Tag or Class')   은 HTMLCollection 를 반환

HTMLCollection  = 노드에 변경사항이 실시간으로 반영됨
NodeList        = 한번 저장된 값을 계속 사용.
-------------------------------------------------------------
.parentNode     = 부모인 노드중 모든노드를 반환
.parentElement  = 부모인 노드중 요소노드를 반환
요소노드란?    = HTML 태그로 이루어진 요소.
노드(node)의 하위개념이 요소(element)이다
-------------------------------------------------------------
주요타입.
.elementNode    = p 태그나 div 태그같은 HTML 요소를 반환
.AtributeNode   = img 태그에 src같은 속성을 반환
.textNode       = 텍스트 반환

.childNods      = 모든 타입의 노드들 전부 반환 
(얘는 공백도 반환해서 쓰지마.)
(예외적으로 실시간반영을 함.)
.children       = 요소 타입의 노드만 반환
**보통 HTMLCollection 을 반환해주는게 좋겠네? 노드요소까지 접근해서ㅇㅇ**
예를 들어
.firstChild 보단
.firstElementChild 이 메서드를 쓰는 상황이 훨신 많겠지
보통 Element 가 들어가는 식이네 ㅇㅇ
아~~~~~~~~~~니시발 모르겠네
아 알겠다
.firstElementChild 는 요소의 첫번째 자식을 반환함 ㅋㅋ child 자나 ㅄ아

형제는
previousSibling 보단
previousElementSibling
nextSibling 보단
nextElementSibling
요론식

코딩앙마 3강.
=======================================================================

-노드 추가
.textContent 는 마크업이 전부 날라감

.innerHTML = '<li>red</li>
이런식으로 마크업 적용 가능
근데 태그걸어야 되는거 불편하죠?
-------------------------------------------------------------

-노드 생성 및 활용
const newLi = document.createElement('li) 
= <li><li>

newLi.innerHTML = 'green' 
= <li>green</li>

ul.appendChild(newLi);
= <ul><li>green</li></ul>
-------------------------------------------------------------

-노드 생성 및 활용 2 (innerHTML없이!)
const newLi = document.createElement('li) 
= <li><li>

const newText = document.createTextNode('pink')
= 텍스트 노드 'pink' 만듬.

newLi.appendChild(newText)
= li 태그 안에다가 'pink' 노드를 넣어줌
= <li>pink</li>

ul.appendChild(newLi)
= <ul><li>pink</li></ul>
**appendChild 는 지정한 부모노드에 마지막 자식으로 추가됨
-------------------------------------------------------------

원하는 위치에 넣기 (insertBefore)
const newLi = document.createElement('li) 
= <li><li>

const newText = document.createTextNode('pink')
= 텍스트 노드 'pink' 만듬.

newLi.appendChild(newText)
= li 태그 안에다가 'pink' 노드를 넣어줌
= <li>pink</li>

*여기까진 -노드 생성 및 활용 2 와 동일하다.*
ul.insertBefore(newli. red);
= red 앞에 li를 넣어라.
appendChild 와 다르게 ul에 넣어주는게 아닌 li앞에 넣어줌.

-------------------------------------------------------------

- 노드 복제
.cloneNode()        = 이렇게 하면 얕은 복사
.cloneNode(true)    = 이렇게 하면 깊은 복사로 
                    자식노드 (텍스트 내용)까지 복사됨
당연히 appendChild 같은걸로 추가해서 활용하면 됨

-------------------------------------------------------------
- 노드 삭제
. removeChild();    = 삭-제 시킴

코딩앙마 4강.
=======================================================================

CSS style, class 제어
.style      = backgroundColor , width 등 cssDeclaration 객체 반환, 
            스타일 쓸 수 있음

.className  = class 에 접근해주는 프로퍼티
            box.className = 'bg-red txt-pink' 이렇게 쓰면 됨

.classList  = add remove 등의 메서드를 준다 골라쓰면 됨
            box.classList.add('txt-white','bg-green') : class 추가
            box.classList.remove('txt-white') : class 제거
            box.classList.replace('a','b') : a class 를 b 로 변경
            box.classList.toggle('bg-green') : bg-green 이라는 클래스가 
            있으면 제거, 없으면 생성.
            토글같은 경우는 이벤트와 함께 클릭시 클래스를 넣었다 뺐다 해줄 수 있음

코딩앙마 5강.
=======================================================================
EVENT 란? 
마우스 키보드를 사용하거나 인풋창 포커스, 문서의 로드 완료. => EVENT 발생
이때 특정 함수를 할당해서 실행해 줄 수 있음. => clickHandler 이런식

on다음에 event 타입을 적고  = "함수명"
onclick="alert('click')"    = 클릭시 alert('click')

------------------------함수 활용법---------------------------

------------------------------------------------

1. onclick

function sayHello() {
    alert("Hello")
}

onclick="sayHello()"

------------------------------------------------

2. onclick

const el = document.getElementById('btn')
el.onclick = sayHello;      <= ()가 없는 이유 : 있으면 함수의 반환값이 할당.

------------------------------------------------

3. addEventListener

const el = document.getElementById('btn')
el.addEventListener('click', sayHello)

------------------------------------------------

4. addEventListener (콜백방식으로 직접작성.)

const el = document.getElementById('btn')
el.addEventListener('click', () => {
    alert("hi")
});

* DOMContentLoaded 의 경우 콜백방식으로 써야 적용이 됨 *
click
dblclick
keyup
등이 있다

------------------------------------------------

코딩앙마 6강. 
=======================================================================

버블링

자식요소에서 발생된 이벤트 객체는 부모와 그 부모를 통해 전파됨
( 하위 -> 상위 ) 전파

 *버블링x*       *버블링o*
focus           focusin
blur            focusout
mouseenter      mouseover  
mouseleave      mouseout

------------------------------------------------

버블링 인위적으로 막기
addEventListener("focusin",(event) => {
    event.stopPropagation();
    console.log();
    });

------------------------------------------------

이벤트 위임 (버블활용)

자신에게 발생한 이벤트를 다른 요소에서처리.

document.getElementById('list').addEventListener("click",함수명);

버블링 <- 부모에 이벤트 걸면 왜 

이론은 부모태그가 같이 이벤트 터지는건데 
왜 활용할때 부모태그에 이벤트를 거는지 궁금하다
=> event.target 으로 부모한테 위임하는거임 ez